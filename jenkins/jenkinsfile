pipeline {
    agent any // Use any available agent
    stages {
//        stage('clone repo') {
//          steps {
//              withCredentials(usernamePassword(credentialsId :jenkins-user-github ,passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME' )){
//              sh("""
//              git config --global credential.username {GIT_USERNAME}
//              git config --global credential.helper "!echo password={GIT_PASSWORD}; echo"
//              git clone https://github.com/sample.git
//              """)
//          }
//         }
//         }
        stage('Setup Parameters') {
            steps {
                script { 
                    properties([
                        parameters([
                            choice(
                                choices: ['ONE', 'TWO'], 
                                name: 'choice_parameter'
                            ),
                            booleanParam(
                                defaultValue: true, 
                                description: '', 
                                name: 'boolean_parameter'
                            ),
                            string(
                                defaultValue: 'scriptcrunch', 
                                name: 'string_parameter', 
                                trim: true
                            )
                        ])
                    ])
                }
            }
        }
        stage('Clone GitHub Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/uptownaravi/devops_course.git'
            }
        }
        stage('Test') { // python unit test the code
            steps {
                script {
                    try {
                    echo 'pylint' 
                    sh "pip3 install pylint"
                    sh "cd sampleApp/fastapi && python -m pylint stars.py"
                } catch (err) {
                    echo "pylint failed"
                }
                }
                //sh 'pytest' // Run a shell command
            }
        }
        stage('Build') { // build stage
            steps {
                echo 'Building the github stars project...' 
                sh "pip3 install setuptools wheel twine"
                sh "cd sampleApp/fastapi"
                sh 'python sampleApp/fastapi/setup.py sdist' 
            }
        }
        stage('Sonar Scan') { // sonar scan
            steps {
                try {
                    echo 'sonar scan the code...'
                sh "cd sampleApp/fastapi"
                //sh"sudo /home/ec2-user/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner -Dsonar.projectKey=py -Dsonar.sources=. -Dsonar.host.url=http://172.31.1.253:9000 -Dsonar.token="
                } catch (err) {
                    echo "sonar failed"
                }
                
            }
        }
        stage('Sonar Qube report') { 
            steps {
                echo 'Generating the report...'
            }
        }
        stage('nexus repo upload') { 
            steps {
                echo 'upload the pypi to nexus repository' 
            }
        }
        stage('Hado Lint Dockerfile') { 
            steps {
                echo "Lint Dockerfile"
                sh "cd sampleApp/fastapi"
                sh "hadolint Dockerfile"

            }
        }
        stage('Docker Build') { 
            steps {
                echo 'build docker file'
                sh "cd sampleApp/fastapi"
                sh "docker build . -t githubstars:1.0"
            }
        }
        stage('Docker Scout Scan') { 
            steps {
                echo 'Generating the report...'
            }
        }
        stage('docker push to ecr') { 
            steps {
                echo 'Generating the report...' 
        }
        }
        stage('create helm chart and package') { 
            steps {
                echo 'Generating the report...' 
            }
        }
        stage('deploy to k8s') { 
            steps {
                echo 'Generating the report...' 
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}
